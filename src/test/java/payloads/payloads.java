package payloads;

import java.util.Random;

import com.github.javafaker.Faker;

import pojo.Login;
import pojo.Product;


/**
 * Utility class for generating dynamic payloads for API testing.
 * <p>
 * This class leverages the Faker library to generate realistic and randomized test data 
 * for {@link Product} objects. It includes a static method {@code productpayload()} that creates
 * a new product with random values for its fields.
 * </p>
 */
public class payloads {

    // Faker instance used to generate random and realistic fake data.
    private static final Faker faker = new Faker();

    // Predefined array of product categories.
    private static final String[] categories = {"electronics", "furniture", "clothing", "books", "beauty"};

    // Random instance to select a random category from the list.
    private static final Random random = new Random();

    /**
     * Generates and returns a new {@link Product} with randomly populated attributes.
     * <p>
     * The generated payload includes:
     * <ul>
     *     <li>A random product name generated by Faker.</li>
     *     <li>A random price converted to {@code double} from a generated price string.</li>
     *     <li>A random sentence used as the product description.</li>
     *     <li>A random image URL generated by Faker. (This can be replaced or fixed if needed.)</li>
     *     <li>A random category selected from a predefined array of categories.</li>
     * </ul>
     * </p>
     *
     * @return a newly created {@link Product} instance with random test data.
     */
    public static Product productpayload() {
        // Generate a random product name.
        String name = faker.commerce().productName();

        // Generate a random price as a string and convert it to a double.
        double price = Double.parseDouble(faker.commerce().price());

        // Generate a random sentence for the product description.
        String description = faker.lorem().sentence();

        // Generate a random image URL. (Alternatively, you can use a fixed URL if preferred.)
        String imageURL = faker.internet().url();

        // Randomly select a category from the available categories array.
        String category = categories[random.nextInt(categories.length)];

        // Create a new Product instance with the generated values.
        Product product = new Product(name, price, description, imageURL, category);

        // Return the newly created product as the payload.
        return product;
    }
    
    
    /**
     * Creates a {@link Login} payload populated with realistic, random credentials.
     * <p>
     * This method uses a shared {@code Faker} instance to generate a plausible
     * username and password for use in authentication tests. Each invocation
     * returns a new {@code Login} object with unique values.
     * </p>
     *
     * @return a {@code Login} object containing:
     *         <ul>
     *           <li><b>username</b> – a fake user name (e.g., "jdoe72")</li>
     *           <li><b>password</b> – a fake password (alphanumeric with symbols)</li>
     *         </ul>
     */
    public static Login loginpayload() {
        // Generate a random username (letters, digits; mimics real account names)
        String username = faker.name().username();

        // Generate a random password (default: 6–20 chars, includes letters, digits, symbols)
        String password = faker.internet().password();
        
     // Construct and return the Login POJO
        Login login=new Login(password, password);
        
        // return the Login POJO
        return login;
    }
    
      
}
